:root {
  --primary-color: #2584ff;
  --secondary-color: #00d9ff;
  --accent-color: #ff3400;
  --headings-color: #1b0760;
  --body-color: #918ca4;
  --border-color: #ccc;
  --dark-body-color: #5c5577;

  --border-radius: 30px;
}
::selection {
  background: var(--primary-color);
  color: white;
}
*,
*::before,
*::after {
  box-sizing: border-box;
}
/** typography */
html {
  font-size: 62.5%; /* 62.5% of 16px = 10px = 1rem */
}
body {
  font-family: "Inter", Arial, Helvetica, sans-serif;
  color: var(--body-color);
  font-size: 2.4rem;
  line-height: 1.5;
}
h1,
h2,
h3 {
  color: var(--headings-color);
  margin-bottom: 1rem;
  line-height: 1.1;
}
h1 {
  font-size: 7rem;
}
h2 {
  font-size: 4rem;
}
h3 {
  font-size: 3rem;
}
p {
  margin-top: 0;
}

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }
  h1 {
    font-size: 8rem;
  }
  h2 {
    font-size: 4rem;
  }
  h3 {
    font-size: 2.4rem;
    font-weight: 500;
  }
}

/** links */
a {
  text-decoration: none;
}
.link-arrow {
  color: var(--accent-color);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}
.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: margin 0.15s;
}
.link-arrow:hover::after {
  margin-left: 10px;
}
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* badges */
/* structure */
.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap;
}
/* skin */
/* bem convention use -- for modifiers */
.badge--primary {
  background-color: var(--primary-color);
  color: white;
}

.badge--secondary {
  background-color: var(--secondary-color);
  color: white;
}
.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}
@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }
  .badge--small {
    font-size: 1.2rem;
  }
}

/* lists */
.list {
  list-style: none;
  padding-left: 0;
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url("../images/tick.svg");
  /* make sure icon are on the screen */
  padding-left: 3rem;
  color: var(--headings-color);
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}
@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* icons */

.icon {
  width: 40px;
  height: 40px;
}
.icon--small {
  width: 30px;
  height: 30px;
}
.icon--primary {
  /* fill only applies to svg */
  fill: var(--primary-color);
}
.icon--white {
  fill: white;
}
.icon-container {
  background: #f3f9fa;
  /* icons are always the same size, not relative to font size */
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /* use inline-block to have a circle background but we want the icon in the middle so inline-flex */
  display: inline-flex;
  justify-content: center;
  align-items: center;
}
.icon-container--accent {
  background-color: var(--accent-color);
}

/* buttons */
.btn {
  border-radius: 40px;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  outline: 0;
  padding: 2rem 4vw;
  text-transform: uppercase;
  white-space: nowrap;
}
.btn .icon {
  width: 2rem;
  height: 2rem;
  margin-right: 1rem;
  vertical-align: middle;
}
.btn--outline {
  background-color: transparent;
  border: 2px solid var(--headings-color);
  color: var(--headings-color);
}
.btn--outline:hover {
  background-color: var(--headings-color);
  color: white;
}
.btn--primary {
  background-color: var(--primary-color);
  color: white;
}
.btn--primary:hover {
  background-color: #3a8ffd;
}
.btn--secondary {
  background-color: var(--secondary-color);
  color: white;
}
.btn--secondary:hover {
  background-color: #00c8eb;
}
.btn--accent {
  background-color: var(--accent-color);
  color: white;
}
.btn--accent:hover {
  background-color: #ec3000;
}
.btn--block {
  width: 100%;
  /* for anchor element that are inline by default (if using a for buttons) */
  display: inline-block;
  text-align: center;
}
.btn--long {
  padding-left: 6rem;
  padding-right: 6rem;
}
@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* inputs */
input {
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  color: var(--headings-color);
  outline: none;
  padding: 1.5rem 3.5rem;
}
::placeholder {
  font-size: 2rem;
  color: #cdcbd7;
}
.input-group {
  border: 1px solid var(--border-color);
  box-shadow: 5px 5px lightblue;
  border-radius: var(--border-radius);
  /* use flex to push button to the right  */
  display: flex;
}
.input-group input {
  border: 0;
  /* push button by growing input field */
  flex-grow: 1;
  /* use 4vh for horizontal padding to have less padding on small mobile
  this allow to see enough chars in the input field */
  padding: 1.5rem 4vw;
  /* fix layout issue on small mobile
  if we dont set the width, the browser can grow it bigger than its container
  if we set it to 0 and rely exclusively on flex-grow the problem is gone  */
  width: 0;
}
.input-group .btn {
  margin: 4px;
}
@media screen and (min-width: 1024px) {
  input {
    font-size: 1.5rem;
  }
}

/* cards */
.card {
  border-radius: 7px;
  /* x-offset y-offset blur spread color   */
  box-shadow: 0 0 20px 10px #f3f3f3;
  overflow: hidden;
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--primary-color);
  color: white;
}
.card--secondary .card__header {
  background: var(--secondary-color);
  color: white;
}
.card--primary .badge--primary {
  background-color: #126de4;
}
.card--secondary .badge--secondary {
  background-color: #02cdf1;
}

/* plans */
.plan__name {
  color: white;
  margin: 0;
  /* use any value as the font (inter) is a variable font */
  font-weight: 500;
  font-size: 2.4rem;
}
.plan__price {
  font-size: 6rem;
}
.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8;
  margin-right: 1rem;
}
.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block;
}

.plan .list__item {
  margin-bottom: 2rem;
}
/* scale up all popular plans across the site */
.plan--popular {
  transform: scale(1.05);
}
.plan--popular .card__header {
  /* set to relative so we can set the image to absolute */
  position: relative;
}
.plan--popular .card__header::before {
  content: url("../images/popular.svg");
  width: 40px;
  /* inline-block so the width is applied */
  display: inline-block;
  /* set to absolute so we can move freely the image
  this means the parent must be set to relative */
  position: absolute;
  top: -6px;
  right: 5%;
}
@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }
  .plan__price {
    font-size: 5rem;
  }
  .plan__billing-cycle {
    font-size: 1.6rem;
  }
  .plan__description {
    font-size: 1.7rem;
  }
}

/* medias */
.media {
  display: flex;
  margin-bottom: 4rem;
}
.media__title {
  margin-top: 0;
}
.media__body {
  margin: 0 2rem;
}
.media__image {
  margin-top: 1rem;
}

/* quotes */
.quote {
  font-size: 3rem;
  color: var(--dark-body-color);
  font-style: italic;
  line-height: 1.3;
}

.quote__body::before {
  /* pre defined value make sure we have opening version */
  content: open-quote;
}
.quote__body::after {
  /* pre defined value make sure we have closing version */
  content: close-quote;
}
.quote__author {
  font-size: 3rem;
  font-weight: 500;
  font-style: normal;
  margin-bottom: 0;
}
.quote__org {
  font-size: 2rem;
  font-style: normal;
  color: var(--headings-color);
  opacity: 0.4;
}
.quote__line {
  position: relative;
  bottom: 1rem;
}
@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }
  .quote__author {
    font-size: 2.4rem;
  }
  .quote__org {
    font-size: 1.6rem;
  }
}

/* grids */
.grid {
  display: grid;
}
/* for tablets and up we want 2 cols */
@media screen and (min-width: 768px) {
  .grid--1x2 {
    grid-template-columns: 1fr 1fr;
  }
}
/* for wide screens and up we want 3 cols */
@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* testimonials */
.testimonial {
  padding: 3rem;
}
.testimonial__image {
  /* use relative positioning on the container to allow absolute of inside elts */
  position: relative;
}
.testimonial__image img {
  width: 100%;
}
.testimonial__image .icon-container {
  position: absolute;
  right: -32px;
  top: 3rem;
}
@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }
  .testimonial .quote {
    margin-left: 6rem;
  }
}

/* callouts */
.callout {
  padding: 4rem;
  border-radius: 5px;
}
.callout__heading {
  color: white;
  margin-top: 0;
  font-size: 3rem;
}
.callout--primary {
  background: var(--primary-color);
  color: white;
}
.callout__content {
  text-align: center;
}
.callout .btn {
  /* in grids, default value for justify-content is strech
    so we prevent the btn from stretching to the whole cell  */
  justify-self: center;
  align-self: center;
}
@media screen and (min-width: 768px) {
  /* to avoid lost space on the right for large screens, because of the 2 cols grid layout 
  we redefine the template to have the right col big enough for the content */
  .callout .grid--1x2 {
    grid-template-columns: 1fr auto;
  }
  .callout__content {
    text-align: left;
  }
  .callout .btn {
    justify-self: start;
    margin: 0 2rem;
  }
}

/* collapsible */
.collapsible__header {
  display: flex;
  /* push the items to the edges of the container */
  justify-content: space-between;
  cursor: pointer;
}
.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}
.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.5s;
}
.collapsible__content {
  /* play on height to allow animation transition */
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  /* animate ALL properties (max-height and opacity) */
  transition: all 0.5s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}
.collapsible--expanded .collapsible__content {
  /* allow to stretch to 100% of the viewport but its only going to stretch to the size
  of the content because we use max-height.
  is using height then the content area would take the entire viewport.
  unset work fine */
  max-height: 100vh;
  opacity: 1;
}

/* blocks */
.block {
  /* define a variable accessible to all elts with .block and their children */
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
}

.block__title {
  margin-top: 0;
}
.block__header {
  text-align: center;
  margin-bottom: 4rem;
}
.block--dark {
  background-color: black;
  color: #7b858b;
}
/* use h1-h3 as we always going to have a heading in a block
 also like this we dont need to add the block__heading class */
.block--dark .block__title,
.block--dark .media__title,
.block--dark h1,
.block--dark h2,
.block--dark h3 {
  color: white;
}

.block--skewed-right {
  /* ensure text doesnt come inside the skewed part 
  use a var defined in .block */
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 90%);
}
.block--skewed-left {
  /* ensure text doesnt come inside the skewed part */
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0 0, 100% 0, 100% 90%, 0 100%);
}

/* set the max width of the content for wide screens 
for dark blocks set the container class on a wrapper as we want to constraint the content
but want the color to cover all the width*/
.container {
  max-width: 1140px;
  margin: 0 auto;
}

/* nav */
.nav {
  background: black;
  display: flex;
  /* outside items pushed to the edges and remainder items distributed evenly */
  justify-content: space-between;
  align-items: center;
  /* enable wrapping to send the list to the second line */
  flex-wrap: wrap;
  padding: 0 1rem;
}
.nav__list {
  width: 100%;
  margin: 0;
}
.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}
/* apply to anchor elt as anchor have their own colors */
.nav__item a {
  color: #d2d0db;
  transition: color 0.3s;
}
.nav__item a:hover {
  color: white;
}
.nav__toggler {
  opacity: 0.5;
  transition: box-shadow 0.15s;
  cursor: pointer;
}

/* use a double selector to ensure this is only for toggle in nav elt
not sure why the nav__prefix of the nested elt isnt enough */
.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px;
}

.nav__brand {
  transform: translateY(5px);
}
@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none;
  }
  .nav__list {
    width: auto;
    display: flex;
    font-size: 1.6rem;
    /* set the initial state of the bar to visible */
    max-height: 100%;
    opacity: 1;
  }
  .nav__item {
    border: 0;
  }
}

/* hero */
.hero__tagline {
  font-size: 2rem;
  color: #b9c3cf;
  letter-spacing: 1px;
  margin: 2rem 0 5rem;
}
.hero__image {
  width: 100%;
}
@media screen and (min-width: 768px) {
  .hero {
    padding-top: 0;
  }
  .hero__content {
    text-align: left;
    align-self: center;
  }
}

/* domains block */
.block-domain .input-group {
  box-shadow: 0 0 30px 20px #e6ebee;
  border: 0;
  margin: 4rem auto;
  max-width: 670px;
}

.block-domain__prices {
  color: var(--headings-color);
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  /* use rem as we need to adjust to content vertically  */
  grid-template-rows: repeat(2, 6rem);
  font-size: 2rem;
  font-weight: 600;
  justify-items: center;
  max-width: 700px;
  margin: 0 auto;
}

@media screen and (min-width: 768px) {
  .block-domain__prices {
    /* setting column numbers to autofit so prices display on 1 line on large screens
    and design will adjust it more than 6 prices */
    /* use minmax to set a range of width for columns, here min width to 100px and auto enlarge */
    /* @marco using flex would probably be just fine but I guess mosh wanted to show this */
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    /* only one row on large screens */
    grid-template-rows: 6rem;
  }
}

/* plans block */
/* bigger gap for cols to avoid shadown overlap to next plan on small screens */
.block-plans .grid {
  gap: 8rem 4rem;
}
/* avoid wide cards on tablets */
.block-plans .card {
  max-width: 500px;
  margin: 0 auto;
}
.block-plans .plan:hover {
  transform: scale(1.05);
}
.block-plans .plan--popular:hover {
  transform: scale(1.15);
}
.plan {
  transition: transform 0.3s ease-out;
}

/* features */
.feature {
  gap: 4rem 2rem;
  margin: 12rem 0;
}
.feature__heading {
  margin: 1rem 0;
}
.feature__image {
  width: 100%;
}
.feature:first-of-type {
  margin-top: 6rem;
}
@media screen and (min-width: 768px) {
  /* really cool stuff! alternate picture and content position for each feature */
  .feature:nth-of-type(even) .feature__content {
    order: 2;
  }
}

/* showcase blocvk */
.block-showcase .grid {
  gap: 4rem;
}
.block-showcase__image img {
  width: 100%;
}
@media screen and (min-width: 768px) {
  .block-showcase .grid {
    /* 
    %  relative to the container
    fr : relative to the content */
    grid-template-columns: 50% 50%;
    /* justify-items: end; */
  }
  /* make the image non responsive to create left overflow on wider screens */
  .block-showcase__image {
    justify-self: end;
  }
  .block-showcase__image img {
    width: auto;
    max-width: 700px;
  }
}

/* footer nav */
.footer {
  background: #232323;
}
.footer__section {
  padding: 2rem;
  border: 1px solid #393939;
}
.footer__heading {
  text-transform: uppercase;
  font-weight: 600;
}
.footer__brand {
  text-align: center;
  margin-top: 5rem;
}
.footer__copyright {
  font-size: 2.1rem;
  color: white;
  opacity: 0.3;
}
@media screen and (min-width: 768px) {
  /* use a specific class in case we add other grids later */
  .footer__sections {
    /* anticipate future columns with autofit and minmax */
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
  }
  .footer .collapsible__chevron {
    display: none;
  }
  .footer .collapsible__content {
    max-height: 100%;
    opacity: 1;
  }
  .footer__section {
    border: 0;
  }
  .footer__section .list {
    margin: 0;
  }
  .footer .nav__item {
    padding-left: 0;
    font-size: 1.4rem;
  }
  .footer__heading {
    font-size: 1.6rem;
  }
  .footer__brand {
    margin-top: 1rem;
    margin-right: 20px;
    /* use -1 to move in first position! */
    order: -1;
  }
  .footer__brand img {
    /* TODO: consider refactor and apply this to all images */
    width: 100%;
  }
  .footer__copyright {
    font-size: 1.5rem;
  }
}
